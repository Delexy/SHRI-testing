"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const lodash_1 = __importDefault(require("lodash"));
const bluebird_1 = __importDefault(require("bluebird"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const fs = bluebird_1.default.promisifyAll(fs_1.default);
const matchesFormats = (filePath, formats) => {
    return lodash_1.default.isEmpty(formats) || lodash_1.default.includes(formats, path_1.default.extname(filePath));
};
const isFile = async (path) => {
    const stat = await fs.statAsync(path);
    return stat.isFile();
};
const getFilePaths = async (basePath) => {
    async function readDirFiles(basePath) {
        const paths = await fs.readdirAsync(basePath);
        const subPaths = await bluebird_1.default.map(paths, (p) => getFilePaths(path_1.default.join(basePath, p)));
        return lodash_1.default.flatten(subPaths);
    }
    try {
        return await isFile(basePath) ? [basePath] : readDirFiles(basePath);
    }
    catch (err) {
        const errMessage = err instanceof Error
            ? err.stack || err.message
            : err;
        throw new Error(`Error while reading path "${basePath}"\n${errMessage}`);
    }
};
module.exports = {
    matchesFormats,
    isFile,
    getFilePaths
};
//# sourceMappingURL=utils.js.map