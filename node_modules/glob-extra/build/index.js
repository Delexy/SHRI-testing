"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMask = exports.expandPaths = void 0;
const path_1 = __importDefault(require("path"));
const bluebird_1 = __importDefault(require("bluebird"));
const lodash_1 = __importDefault(require("lodash"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const minimatch_1 = require("minimatch");
const normalize_path_1 = __importDefault(require("normalize-path"));
const defaults_1 = __importDefault(require("./defaults"));
const utils_1 = __importDefault(require("./utils"));
const getFilesByMask = (pattern, options) => (0, fast_glob_1.default)(pattern, options);
const expandPath = async (basePath, options) => {
    const resolvedBasePath = options.root ? path_1.default.resolve(options.root, basePath) : basePath;
    const isFile = await utils_1.default.isFile(resolvedBasePath);
    const paths = isFile ? [resolvedBasePath] : await utils_1.default.getFilePaths(resolvedBasePath);
    return paths.filter((path) => utils_1.default.matchesFormats(path, options.formats));
};
const processPaths = async (paths, cb) => {
    const processedPaths = await bluebird_1.default.map(paths, cb);
    return (0, lodash_1.default)(processedPaths).flatten().uniq().value();
};
const expandPaths = async (paths, _expandOpts, _globOpts) => {
    const expandOpts = (0, defaults_1.default)('expandOpts', _expandOpts);
    const globOpts = (0, lodash_1.default)((0, defaults_1.default)('globOpts', _globOpts)).omitBy(lodash_1.default.isUndefined).value();
    // fast-glob requires only forward-slashes (https://github.com/mrmlnc/fast-glob#pattern-syntax)
    if (globOpts.ignore) {
        globOpts.ignore = globOpts.ignore.map(p => (0, normalize_path_1.default)(p));
    }
    const normalizedPaths = [].concat(paths).map(p => (0, normalize_path_1.default)(p));
    const matchedPaths = await processPaths(normalizedPaths, (path) => getFilesByMask(path, globOpts));
    return processPaths(matchedPaths, (path) => expandPath(path, expandOpts));
};
exports.expandPaths = expandPaths;
const isMask = (pattern) => {
    if (!pattern) {
        return false;
    }
    const { set } = new minimatch_1.Minimatch(pattern);
    if (set.length > 1) {
        return true;
    }
    return set[0].some((v) => typeof v !== 'string');
};
exports.isMask = isMask;
//# sourceMappingURL=index.js.map